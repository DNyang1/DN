기말 서술형 6문제 
(1)  클래스다이어그램 그리기 (클래스명 맴버변수 맴버함수)
사람 : ID, 연락처, 비밀번호, 사용자명
회원 : 대출도서, 도서대출, 도서반납
사서 : 직원ID, 도서관리, 회원관리

도서 DB : 도서목록, 회원목록, 도서찾기
도서 : 제목, 저자 , 대출가능여부

대출: 대출ID , 회원, 대출일, 반납일

(2) 모델링 방법 자세히 기술(어떻게 구분, 요소는 무엇, 유스케이스/클래스/순차 다이어그램) 

기능모델링 - 사용자 요구사항 받아 / 소프트웨어 가 해야할 기능을 /  사용자의 View 에서 표현

유스케이스 - 
1. 요구사항 검토 하기
2. 시스템의 경계정하고 이름 정의 하기 
3. 엑터 식별, 엑터 역할 정의 하기
4. 엑터가 쓰는 기능 식별 하기
5. 식별된 기능과 엑터 관계 정의하기 
6. 설명서쓰기

시스템 범위 - 시스템 범위 시스템 내부 
유스케이스 - 시스템이 엑터에게 제공하는 기능
엑터 - 시스템과 상호작용하는 모든 외부 요소
관계 - 포함 확장 일반화 

클래스 다이어그램 - 클래스 이름/속성/연산, 클래스의 관계 표현
1. 문장 분석 - 걍 문장 분석해서 넣는거 , 
2. 일반 객체 목록 - 뭐야이건 씨@발
3. 브레인 스토밍 - 대가리굴리기
4. 패턴 적용 - 어휴 씨@빨 진짜 이런걸 왜쓰라는거야

순차 다이어그램 - 상호작용을 시간 축 중심으로. 
1. 객체 - 객체 상호작용 → 으로 표현
2. 시간 축 - 메세지 전달을 ↓ 로 , 세로축, 점선 , 객체의 Lifeline 
3. 실행 사건 - 실행 동작의 발생 기간을 길쭉한 □로
4. 메세지 전달 - 객체 간 상호작용을 나타내는 기본요소, 함수 호출을 의미, method name 과 매개변수가 화살표로
5. 제어 로직 - 행위 표현(선택, 반복, 병렬처리 등) 


(3) 모듈 응집 결합력이 뭔지, 좋은소프트웨어의 조건으로 응집력과 결합력이 어떻게 구성되어야 하는지  

모듈화 - 독립적인 기능이 있는 논리적 묶음(함수)에 해당하는 모듈로 소프트웨어 시스템을 구성할 수 있도록 개발
결합력 - 모듈간의 의존성 관계, 결합력이 작아야, 독립적인 기능을 갖도록, 중복 X, 모듈간 상호작용 줄여야
응집력 - 모듈 안의 것들의 기능적 관련성의 강도가 얼마난지, 응집력을 최대화 하자
조건 - 모듈의 결합도는 약하게, 응집도는 강하게, 모듈의 크기는 작게 만들어야함

(4) 응집력의 종류나 결합력의 종류중 한 문제순서대로 간단히 설명

메데스 제외공내
1. 메시지 결합력 - 메세지 하나만 사용
2. 데이터 결합력 - int, String 등 간단한것만 사용
3. 스탬프 결합력 - 구조체 같은 복합 데이터 사용
4. 제어 결합력 - if 같은 제어문을 사용
5. 외부 결합력 - 외부로 결합, 뭐 file , interface , protocol 같은거로 
6. 공유 결합력 - 광역 변수 사용
7. 내용 결합력 - 한 모듈에서 다른 모듈의 내부를 직접 참조하는거


기순 교절 시논우
1. 기능 응집력 - 그냥 단지 하나를 위해
2. 순차 응집력 - 결과가 과정이 될때 (한번만)
3. 교환 응집력 - 모듈의 return 이 여러개일때
4. 절차 응집력 - 문장끼리는 관련 없는데 흐름이 있을때, 순차가 존나길때 
5. 시간 응집력 - 딱 그때 말곤 안쓰는거
6. 논리 응집력 - 다 동일한 구조인데 다 다른 작업을 할때, 
7. 우연 응집력 - 그냥 존나 난장판

(5) 좋은 소프트웨어의 6가지 공통점

1. 가독성이 좋다 (수명주기 동안 여러번쓰인다)
2. 주석이 잘 작성 되어있다 (목적을 설명해주면 좋다. 까먹을수도 있다.)
3. 코드 구조가 간결하다 (복잡성이 심하면 버그증가)
4. 변경에 탄력적이다. (현재 미래 둘다 생각해야 좋다.)
5. 활용을 위해 관리 (너 말고 다른사람도 버그를 수정할줄 알아야한다,)
6. 제 기능을 해야한다 (그냥 당연한거아닌가)

(6) 오픈소스 기반 개발 프로세스

요구사항 분석  - 건축 디자인 - 구현 - 통합테스트/배치
사용/수정/재배포 확인

오픈 소스 활용 시 주의 사항
1. 라이센스 권한 검토 - 사용가능한지, 수정가능한지, 재배포 가능한지
2. 검증 체계 구축 - 취약성 같은거
3. 지속적인 관리 - 라이센스 변경 및 준수, 취약점 발견 등 관리
4. 철저한 기술 검토 - 버그는 있는지, 인터페이스가 일치하는지, 내부적으로 일치하는지,
5. 변경 사항 기록 - 통합 오픈소스가 수정되면 기록하기. 주석, 가이드라인

GIT - 소규모 대규모 프로젝트 모두지원하는
	오픈소스 기반 VCS , 독립적인 분기를 만들어 여러 프로젝트를 관리가능.

(7) 기타 

패키지 다이어그램 - 클래스 다이어그램의 클래스 간 관계를 고려하여 서로 관련성이 높은 클래스들, 즉 클래스 간
				응집력이 높은 것들을 하나의 패키지로 묶어 표현한 것

패키지 다이어그램 작성 절차 : 
	1. 대상물 선정 : 도메인 클래스 다이어그램 선택
	2. 클래스 그룹핑 :
		* 일반화 관계 클래스 묶기
		* 집합 관계 클래스 묶기
		* 클래스의 의미적 속성(멤버 변수, 멤버 함수) 고려하여 그룹화
	3. 패키지 명칭 부여 : 각 패키지에 적절한 이름 지정
	4. 패키지 간 관계 설정 : 패키지 간의 관계를 정의
	5. 패키지 다이어그램 완성 : 프레임을 사용해 다이어그램 완성

3 계층 아키텍쳐 -
 HCI(Human Computer Interaction) 계층 : 사용자 인터페이스에 해당하는 클래스를 포함
 PD(Problem Domain) 계층 : 분석 과정에서 도출된 도메인 클래스들을 포함하는 계층
 DM(Data Manipulation) 계층 : 파일 또는 데이터베이스 테이블에 해당하는 데이터 클래스를 포함하는 계층

좋은 코드 작성을 위한 규칙 : 
1. 최적화 보단 가독성
2. 아키텍쳐 우선 개발
3. 테스트 커버리지 고려
4. 간단하고 단순하게
5. 주석을 작성하되 보조적으로
6. 강한 결합 느슨한 결합
7. 코드 리뷰가 항상 좋은건 아님
8. 리펙토링은 작동 x
9. 가능하면 자동화 도구 사용
10. 취미 가져라
11. 여유 시간에 새로운걸 배워라

시큐어 코딩 : 
 개발 단계에서 공격을 유발할 수 있는 잠재적 보안 취약점을 제거, 안전한 소프트웨어 개발 을 위한 
프로그래밍 기법 